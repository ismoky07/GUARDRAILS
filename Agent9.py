import os
import time
from dotenv import load_dotenv
from agno.agent import Agent
from agno.models.xai import xAI
from agno.tools.yfinance import YFinanceTools

load_dotenv()
XAI_API_KEY = os.getenv("XAI_API_KEY")

# Cr√©er l'agent
agent = Agent(
    model=xAI(id="grok-3", api_key=XAI_API_KEY),
    tools=[YFinanceTools(stock_price=True)],
    show_tool_calls=True,
    instructions="""Tu es un agent financier.
    Ton r√¥le est de r√©cup√©rer les prix d'actions en temps r√©el.
    Utilise l'outil get_current_stock_price pour toutes les requ√™tes boursi√®res.
    Fournis des r√©ponses pr√©cises et professionnelles."""
)

# T√¢ches simples pour tester le Tool Success Rate
tasks = [
    {"input": "What is the stock price of NVDA?", "should_work": True},
    {"input": "Get AAPL stock price", "should_work": True},
    {"input": "What is the stock price of INVALID?", "should_work": False}
]

print("üõ†Ô∏è TOOL SUCCESS RATE TEST")
print("="*30)

successful = 0
total = len(tasks)

for i, task in enumerate(tasks, 1):
    print(f"\nüìã T√¢che {i}: {task['input']}")
    
    start_time = time.time()
    agent.print_response(task['input'], stream=True)
    end_time = time.time()
    
    # V√©rifier si l'outil a fonctionn√©
    tool_worked = False
    if agent.run_response and agent.run_response.messages:
        for message in agent.run_response.messages:
            if message.tool_calls:
                tool_worked = True
                break
    
    # D√©terminer le succ√®s
    if task['should_work'] and tool_worked:
        successful += 1
        status = "‚úÖ"
    elif not task['should_work'] and not tool_worked:
        successful += 1
        status = "‚úÖ"
    else:
        status = "‚ùå"
    
    print(f"   R√©sultat: {status} (Temps: {end_time - start_time:.2f}s)")
    agent.run_response = None

# R√©sultats finaux
success_rate = (successful / total) * 100
print(f"\nüìä R√âSULTATS:")
print(f"   ‚Ä¢ Taux de succ√®s: {success_rate:.1f}% ({successful}/{total})")
print("="*30)